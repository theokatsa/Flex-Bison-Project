<program> ::= <include_statement>* <class_declaration>*

<include_statement> ::= "include" <string_literal> | "#" <string_literal>

<class_declaration> ::= "class" <identifier> "{" <class_body> "}"

<class_body> ::= (<field_declaration> | <method_declaration>)*

<field_declaration> ::= <type> <identifier> ";"

<method_declaration> ::= <type> <identifier> "(" <parameter_list>? ")" "{" <statement>* "}"

<parameter_list> ::= <parameter> ("," <parameter>)*

<parameter> ::= <type> <identifier>

<type> ::= "int" | "char" | "double" | "boolean" | "String" | "void"

<statement> ::= <variable_declaration> | <assignment> | <if_statement> |
                <while_statement> | <for_statement> | <return_statement> |
                <expression_statement> | <print_statement> | <block_statement>

<variable_declaration> ::= <type> <identifier> ("=" <expression>)? ";"

<assignment> ::= <identifier> "=" <expression> ";"

<if_statement> ::= "if" "(" <expression> ")" <statement> ("else" <statement>)?

<while_statement> ::= "while" "(" <expression> ")" <statement>

<for_statement> ::= "for" "(" <variable_declaration>? ";" <expression>? ";" <expression>? ")" <statement>

<return_statement> ::= "return" <expression>? ";"

<expression_statement> ::= <expression> ";"

<print_statement> ::= "printf" "(" <string_literal> ("," <expression>)* ")" ";" |
                      "out.print" "(" <expression> ")" ";"

<block_statement> ::= "{" <statement>* "}"

<expression> ::= <identifier> | <literal> | <binary_expression> | <unary_expression> | <method_call>

<binary_expression> ::= <expression> <operator> <expression>

<unary_expression> ::= <operator> <expression>

<method_call> ::= <identifier> "(" <argument_list>? ")"

<argument_list> ::= <expression> ("," <expression>)*

<literal> ::= <int_literal> | <double_literal> | <string_literal> | <char_literal> | "true" | "false"

<identifier> ::= /[a-zA-Z_][a-zA-Z0-9_]*/

<int_literal> ::= /[0-9]+/

<double_literal> ::= /[0-9]+\.[0-9]+d/

<string_literal> ::= /"[^"\n]*"/

<char_literal> ::= /'[^']'/

<reserved_keyword> ::= "int" | "char" | "double" | "boolean" | "String" | "class" | "new" |
                       "return" | "void" | "if" | "else" | "while" | "do" | "for" |
                       "switch" | "case" | "default" | "break" | "true" | "false" |
                       "public" | "private"

<operator> ::= "=" | "==" | "!=" | "<" | ">" | "+" | "-" | "*" | "/" |
               "&&" | "||" | "!" | "&" | "|" | "^" | "%" | "<=" | ">="

<delimiter> ::= "{" | "}" | "[" | "]" | "(" | ")" | ";" | "," | "."

<print_statement> ::= "printf" | "out.print"

<include> ::= "include" | "#"
